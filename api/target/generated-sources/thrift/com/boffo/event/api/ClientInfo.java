/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boffo.event.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-4")
public class ClientInfo implements org.apache.thrift.TBase<ClientInfo, ClientInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ClientInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientInfo");

  private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RUNTIME_ENVIRONMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeEnvironment", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientInfoTupleSchemeFactory());
  }

  public String apiKey; // required
  public String clientId; // required
  public String runtimeEnvironment; // required
  public String requestId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    API_KEY((short)1, "apiKey"),
    CLIENT_ID((short)2, "clientId"),
    RUNTIME_ENVIRONMENT((short)3, "runtimeEnvironment"),
    REQUEST_ID((short)4, "requestId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // API_KEY
          return API_KEY;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // RUNTIME_ENVIRONMENT
          return RUNTIME_ENVIRONMENT;
        case 4: // REQUEST_ID
          return REQUEST_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNTIME_ENVIRONMENT, new org.apache.thrift.meta_data.FieldMetaData("runtimeEnvironment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientInfo.class, metaDataMap);
  }

  public ClientInfo() {
  }

  public ClientInfo(
    String apiKey,
    String clientId,
    String runtimeEnvironment,
    String requestId)
  {
    this();
    this.apiKey = apiKey;
    this.clientId = clientId;
    this.runtimeEnvironment = runtimeEnvironment;
    this.requestId = requestId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientInfo(ClientInfo other) {
    if (other.isSetApiKey()) {
      this.apiKey = other.apiKey;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetRuntimeEnvironment()) {
      this.runtimeEnvironment = other.runtimeEnvironment;
    }
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
  }

  public ClientInfo deepCopy() {
    return new ClientInfo(this);
  }

  @Override
  public void clear() {
    this.apiKey = null;
    this.clientId = null;
    this.runtimeEnvironment = null;
    this.requestId = null;
  }

  public String getApiKey() {
    return this.apiKey;
  }

  public ClientInfo setApiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  public void unsetApiKey() {
    this.apiKey = null;
  }

  /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
  public boolean isSetApiKey() {
    return this.apiKey != null;
  }

  public void setApiKeyIsSet(boolean value) {
    if (!value) {
      this.apiKey = null;
    }
  }

  public String getClientId() {
    return this.clientId;
  }

  public ClientInfo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  public String getRuntimeEnvironment() {
    return this.runtimeEnvironment;
  }

  public ClientInfo setRuntimeEnvironment(String runtimeEnvironment) {
    this.runtimeEnvironment = runtimeEnvironment;
    return this;
  }

  public void unsetRuntimeEnvironment() {
    this.runtimeEnvironment = null;
  }

  /** Returns true if field runtimeEnvironment is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeEnvironment() {
    return this.runtimeEnvironment != null;
  }

  public void setRuntimeEnvironmentIsSet(boolean value) {
    if (!value) {
      this.runtimeEnvironment = null;
    }
  }

  public String getRequestId() {
    return this.requestId;
  }

  public ClientInfo setRequestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case API_KEY:
      if (value == null) {
        unsetApiKey();
      } else {
        setApiKey((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case RUNTIME_ENVIRONMENT:
      if (value == null) {
        unsetRuntimeEnvironment();
      } else {
        setRuntimeEnvironment((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case API_KEY:
      return getApiKey();

    case CLIENT_ID:
      return getClientId();

    case RUNTIME_ENVIRONMENT:
      return getRuntimeEnvironment();

    case REQUEST_ID:
      return getRequestId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case API_KEY:
      return isSetApiKey();
    case CLIENT_ID:
      return isSetClientId();
    case RUNTIME_ENVIRONMENT:
      return isSetRuntimeEnvironment();
    case REQUEST_ID:
      return isSetRequestId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientInfo)
      return this.equals((ClientInfo)that);
    return false;
  }

  public boolean equals(ClientInfo that) {
    if (that == null)
      return false;

    boolean this_present_apiKey = true && this.isSetApiKey();
    boolean that_present_apiKey = true && that.isSetApiKey();
    if (this_present_apiKey || that_present_apiKey) {
      if (!(this_present_apiKey && that_present_apiKey))
        return false;
      if (!this.apiKey.equals(that.apiKey))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_runtimeEnvironment = true && this.isSetRuntimeEnvironment();
    boolean that_present_runtimeEnvironment = true && that.isSetRuntimeEnvironment();
    if (this_present_runtimeEnvironment || that_present_runtimeEnvironment) {
      if (!(this_present_runtimeEnvironment && that_present_runtimeEnvironment))
        return false;
      if (!this.runtimeEnvironment.equals(that.runtimeEnvironment))
        return false;
    }

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_apiKey = true && (isSetApiKey());
    list.add(present_apiKey);
    if (present_apiKey)
      list.add(apiKey);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_runtimeEnvironment = true && (isSetRuntimeEnvironment());
    list.add(present_runtimeEnvironment);
    if (present_runtimeEnvironment)
      list.add(runtimeEnvironment);

    boolean present_requestId = true && (isSetRequestId());
    list.add(present_requestId);
    if (present_requestId)
      list.add(requestId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApiKey()).compareTo(other.isSetApiKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntimeEnvironment()).compareTo(other.isSetRuntimeEnvironment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeEnvironment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeEnvironment, other.runtimeEnvironment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientInfo(");
    boolean first = true;

    sb.append("apiKey:");
    if (this.apiKey == null) {
      sb.append("null");
    } else {
      sb.append(this.apiKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("runtimeEnvironment:");
    if (this.runtimeEnvironment == null) {
      sb.append("null");
    } else {
      sb.append(this.runtimeEnvironment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientInfoStandardSchemeFactory implements SchemeFactory {
    public ClientInfoStandardScheme getScheme() {
      return new ClientInfoStandardScheme();
    }
  }

  private static class ClientInfoStandardScheme extends StandardScheme<ClientInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // API_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiKey = iprot.readString();
              struct.setApiKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RUNTIME_ENVIRONMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runtimeEnvironment = iprot.readString();
              struct.setRuntimeEnvironmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.apiKey != null) {
        oprot.writeFieldBegin(API_KEY_FIELD_DESC);
        oprot.writeString(struct.apiKey);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.runtimeEnvironment != null) {
        oprot.writeFieldBegin(RUNTIME_ENVIRONMENT_FIELD_DESC);
        oprot.writeString(struct.runtimeEnvironment);
        oprot.writeFieldEnd();
      }
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientInfoTupleSchemeFactory implements SchemeFactory {
    public ClientInfoTupleScheme getScheme() {
      return new ClientInfoTupleScheme();
    }
  }

  private static class ClientInfoTupleScheme extends TupleScheme<ClientInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApiKey()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetRuntimeEnvironment()) {
        optionals.set(2);
      }
      if (struct.isSetRequestId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetApiKey()) {
        oprot.writeString(struct.apiKey);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetRuntimeEnvironment()) {
        oprot.writeString(struct.runtimeEnvironment);
      }
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.apiKey = iprot.readString();
        struct.setApiKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.runtimeEnvironment = iprot.readString();
        struct.setRuntimeEnvironmentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
    }
  }

}

