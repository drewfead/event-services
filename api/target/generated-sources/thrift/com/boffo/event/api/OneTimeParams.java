/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boffo.event.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-4")
public class OneTimeParams implements org.apache.thrift.TBase<OneTimeParams, OneTimeParams._Fields>, java.io.Serializable, Cloneable, Comparable<OneTimeParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneTimeParams");

  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ATTENDEE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("attendeeIds", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OneTimeParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OneTimeParamsTupleSchemeFactory());
  }

  public long start; // required
  public long duration; // required
  public List<String> attendeeIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START((short)1, "start"),
    DURATION((short)2, "duration"),
    ATTENDEE_IDS((short)3, "attendeeIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START
          return START;
        case 2: // DURATION
          return DURATION;
        case 3: // ATTENDEE_IDS
          return ATTENDEE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __DURATION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTENDEE_IDS, new org.apache.thrift.meta_data.FieldMetaData("attendeeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneTimeParams.class, metaDataMap);
  }

  public OneTimeParams() {
    this.attendeeIds = new ArrayList<String>();

  }

  public OneTimeParams(
    long start,
    long duration,
    List<String> attendeeIds)
  {
    this();
    this.start = start;
    setStartIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.attendeeIds = attendeeIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneTimeParams(OneTimeParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.start = other.start;
    this.duration = other.duration;
    if (other.isSetAttendeeIds()) {
      List<String> __this__attendeeIds = new ArrayList<String>(other.attendeeIds);
      this.attendeeIds = __this__attendeeIds;
    }
  }

  public OneTimeParams deepCopy() {
    return new OneTimeParams(this);
  }

  @Override
  public void clear() {
    setStartIsSet(false);
    this.start = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.attendeeIds = new ArrayList<String>();

  }

  public long getStart() {
    return this.start;
  }

  public OneTimeParams setStart(long start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public OneTimeParams setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getAttendeeIdsSize() {
    return (this.attendeeIds == null) ? 0 : this.attendeeIds.size();
  }

  public java.util.Iterator<String> getAttendeeIdsIterator() {
    return (this.attendeeIds == null) ? null : this.attendeeIds.iterator();
  }

  public void addToAttendeeIds(String elem) {
    if (this.attendeeIds == null) {
      this.attendeeIds = new ArrayList<String>();
    }
    this.attendeeIds.add(elem);
  }

  public List<String> getAttendeeIds() {
    return this.attendeeIds;
  }

  public OneTimeParams setAttendeeIds(List<String> attendeeIds) {
    this.attendeeIds = attendeeIds;
    return this;
  }

  public void unsetAttendeeIds() {
    this.attendeeIds = null;
  }

  /** Returns true if field attendeeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAttendeeIds() {
    return this.attendeeIds != null;
  }

  public void setAttendeeIdsIsSet(boolean value) {
    if (!value) {
      this.attendeeIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case ATTENDEE_IDS:
      if (value == null) {
        unsetAttendeeIds();
      } else {
        setAttendeeIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START:
      return Long.valueOf(getStart());

    case DURATION:
      return Long.valueOf(getDuration());

    case ATTENDEE_IDS:
      return getAttendeeIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START:
      return isSetStart();
    case DURATION:
      return isSetDuration();
    case ATTENDEE_IDS:
      return isSetAttendeeIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneTimeParams)
      return this.equals((OneTimeParams)that);
    return false;
  }

  public boolean equals(OneTimeParams that) {
    if (that == null)
      return false;

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_attendeeIds = true && this.isSetAttendeeIds();
    boolean that_present_attendeeIds = true && that.isSetAttendeeIds();
    if (this_present_attendeeIds || that_present_attendeeIds) {
      if (!(this_present_attendeeIds && that_present_attendeeIds))
        return false;
      if (!this.attendeeIds.equals(that.attendeeIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_start = true;
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_duration = true;
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_attendeeIds = true && (isSetAttendeeIds());
    list.add(present_attendeeIds);
    if (present_attendeeIds)
      list.add(attendeeIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(OneTimeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttendeeIds()).compareTo(other.isSetAttendeeIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttendeeIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attendeeIds, other.attendeeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OneTimeParams(");
    boolean first = true;

    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attendeeIds:");
    if (this.attendeeIds == null) {
      sb.append("null");
    } else {
      sb.append(this.attendeeIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OneTimeParamsStandardSchemeFactory implements SchemeFactory {
    public OneTimeParamsStandardScheme getScheme() {
      return new OneTimeParamsStandardScheme();
    }
  }

  private static class OneTimeParamsStandardScheme extends StandardScheme<OneTimeParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OneTimeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start = iprot.readI64();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTENDEE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.attendeeIds = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.attendeeIds.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAttendeeIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OneTimeParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      if (struct.attendeeIds != null) {
        oprot.writeFieldBegin(ATTENDEE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attendeeIds.size()));
          for (String _iter3 : struct.attendeeIds)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OneTimeParamsTupleSchemeFactory implements SchemeFactory {
    public OneTimeParamsTupleScheme getScheme() {
      return new OneTimeParamsTupleScheme();
    }
  }

  private static class OneTimeParamsTupleScheme extends TupleScheme<OneTimeParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OneTimeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStart()) {
        optionals.set(0);
      }
      if (struct.isSetDuration()) {
        optionals.set(1);
      }
      if (struct.isSetAttendeeIds()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStart()) {
        oprot.writeI64(struct.start);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetAttendeeIds()) {
        {
          oprot.writeI32(struct.attendeeIds.size());
          for (String _iter4 : struct.attendeeIds)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OneTimeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.start = iprot.readI64();
        struct.setStartIsSet(true);
      }
      if (incoming.get(1)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attendeeIds = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.attendeeIds.add(_elem6);
          }
        }
        struct.setAttendeeIdsIsSet(true);
      }
    }
  }

}

