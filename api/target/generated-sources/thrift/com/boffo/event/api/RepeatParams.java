/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boffo.event.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-4")
public class RepeatParams implements org.apache.thrift.TBase<RepeatParams, RepeatParams._Fields>, java.io.Serializable, Cloneable, Comparable<RepeatParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepeatParams");

  private static final org.apache.thrift.protocol.TField FIRST_START_FIELD_DESC = new org.apache.thrift.protocol.TField("firstStart", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ATTENDEE_IDS_BY_OCCURENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("attendeeIdsByOccurence", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepeatParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepeatParamsTupleSchemeFactory());
  }

  public long firstStart; // required
  public long duration; // required
  public Repeat repeat; // required
  public Map<Integer,List<String>> attendeeIdsByOccurence; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_START((short)1, "firstStart"),
    DURATION((short)2, "duration"),
    REPEAT((short)3, "repeat"),
    ATTENDEE_IDS_BY_OCCURENCE((short)4, "attendeeIdsByOccurence");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_START
          return FIRST_START;
        case 2: // DURATION
          return DURATION;
        case 3: // REPEAT
          return REPEAT;
        case 4: // ATTENDEE_IDS_BY_OCCURENCE
          return ATTENDEE_IDS_BY_OCCURENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIRSTSTART_ISSET_ID = 0;
  private static final int __DURATION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_START, new org.apache.thrift.meta_data.FieldMetaData("firstStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT, new org.apache.thrift.meta_data.FieldMetaData("repeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Repeat.class)));
    tmpMap.put(_Fields.ATTENDEE_IDS_BY_OCCURENCE, new org.apache.thrift.meta_data.FieldMetaData("attendeeIdsByOccurence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepeatParams.class, metaDataMap);
  }

  public RepeatParams() {
    this.attendeeIdsByOccurence = new HashMap<Integer,List<String>>();

  }

  public RepeatParams(
    long firstStart,
    long duration,
    Repeat repeat,
    Map<Integer,List<String>> attendeeIdsByOccurence)
  {
    this();
    this.firstStart = firstStart;
    setFirstStartIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.repeat = repeat;
    this.attendeeIdsByOccurence = attendeeIdsByOccurence;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepeatParams(RepeatParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.firstStart = other.firstStart;
    this.duration = other.duration;
    if (other.isSetRepeat()) {
      this.repeat = new Repeat(other.repeat);
    }
    if (other.isSetAttendeeIdsByOccurence()) {
      Map<Integer,List<String>> __this__attendeeIdsByOccurence = new HashMap<Integer,List<String>>(other.attendeeIdsByOccurence.size());
      for (Map.Entry<Integer, List<String>> other_element : other.attendeeIdsByOccurence.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        Integer __this__attendeeIdsByOccurence_copy_key = other_element_key;

        List<String> __this__attendeeIdsByOccurence_copy_value = new ArrayList<String>(other_element_value);

        __this__attendeeIdsByOccurence.put(__this__attendeeIdsByOccurence_copy_key, __this__attendeeIdsByOccurence_copy_value);
      }
      this.attendeeIdsByOccurence = __this__attendeeIdsByOccurence;
    }
  }

  public RepeatParams deepCopy() {
    return new RepeatParams(this);
  }

  @Override
  public void clear() {
    setFirstStartIsSet(false);
    this.firstStart = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.repeat = null;
    this.attendeeIdsByOccurence = new HashMap<Integer,List<String>>();

  }

  public long getFirstStart() {
    return this.firstStart;
  }

  public RepeatParams setFirstStart(long firstStart) {
    this.firstStart = firstStart;
    setFirstStartIsSet(true);
    return this;
  }

  public void unsetFirstStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTSTART_ISSET_ID);
  }

  /** Returns true if field firstStart is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstStart() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTSTART_ISSET_ID);
  }

  public void setFirstStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTSTART_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public RepeatParams setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public Repeat getRepeat() {
    return this.repeat;
  }

  public RepeatParams setRepeat(Repeat repeat) {
    this.repeat = repeat;
    return this;
  }

  public void unsetRepeat() {
    this.repeat = null;
  }

  /** Returns true if field repeat is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat() {
    return this.repeat != null;
  }

  public void setRepeatIsSet(boolean value) {
    if (!value) {
      this.repeat = null;
    }
  }

  public int getAttendeeIdsByOccurenceSize() {
    return (this.attendeeIdsByOccurence == null) ? 0 : this.attendeeIdsByOccurence.size();
  }

  public void putToAttendeeIdsByOccurence(int key, List<String> val) {
    if (this.attendeeIdsByOccurence == null) {
      this.attendeeIdsByOccurence = new HashMap<Integer,List<String>>();
    }
    this.attendeeIdsByOccurence.put(key, val);
  }

  public Map<Integer,List<String>> getAttendeeIdsByOccurence() {
    return this.attendeeIdsByOccurence;
  }

  public RepeatParams setAttendeeIdsByOccurence(Map<Integer,List<String>> attendeeIdsByOccurence) {
    this.attendeeIdsByOccurence = attendeeIdsByOccurence;
    return this;
  }

  public void unsetAttendeeIdsByOccurence() {
    this.attendeeIdsByOccurence = null;
  }

  /** Returns true if field attendeeIdsByOccurence is set (has been assigned a value) and false otherwise */
  public boolean isSetAttendeeIdsByOccurence() {
    return this.attendeeIdsByOccurence != null;
  }

  public void setAttendeeIdsByOccurenceIsSet(boolean value) {
    if (!value) {
      this.attendeeIdsByOccurence = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_START:
      if (value == null) {
        unsetFirstStart();
      } else {
        setFirstStart((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case REPEAT:
      if (value == null) {
        unsetRepeat();
      } else {
        setRepeat((Repeat)value);
      }
      break;

    case ATTENDEE_IDS_BY_OCCURENCE:
      if (value == null) {
        unsetAttendeeIdsByOccurence();
      } else {
        setAttendeeIdsByOccurence((Map<Integer,List<String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_START:
      return Long.valueOf(getFirstStart());

    case DURATION:
      return Long.valueOf(getDuration());

    case REPEAT:
      return getRepeat();

    case ATTENDEE_IDS_BY_OCCURENCE:
      return getAttendeeIdsByOccurence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_START:
      return isSetFirstStart();
    case DURATION:
      return isSetDuration();
    case REPEAT:
      return isSetRepeat();
    case ATTENDEE_IDS_BY_OCCURENCE:
      return isSetAttendeeIdsByOccurence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepeatParams)
      return this.equals((RepeatParams)that);
    return false;
  }

  public boolean equals(RepeatParams that) {
    if (that == null)
      return false;

    boolean this_present_firstStart = true;
    boolean that_present_firstStart = true;
    if (this_present_firstStart || that_present_firstStart) {
      if (!(this_present_firstStart && that_present_firstStart))
        return false;
      if (this.firstStart != that.firstStart)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_repeat = true && this.isSetRepeat();
    boolean that_present_repeat = true && that.isSetRepeat();
    if (this_present_repeat || that_present_repeat) {
      if (!(this_present_repeat && that_present_repeat))
        return false;
      if (!this.repeat.equals(that.repeat))
        return false;
    }

    boolean this_present_attendeeIdsByOccurence = true && this.isSetAttendeeIdsByOccurence();
    boolean that_present_attendeeIdsByOccurence = true && that.isSetAttendeeIdsByOccurence();
    if (this_present_attendeeIdsByOccurence || that_present_attendeeIdsByOccurence) {
      if (!(this_present_attendeeIdsByOccurence && that_present_attendeeIdsByOccurence))
        return false;
      if (!this.attendeeIdsByOccurence.equals(that.attendeeIdsByOccurence))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_firstStart = true;
    list.add(present_firstStart);
    if (present_firstStart)
      list.add(firstStart);

    boolean present_duration = true;
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_repeat = true && (isSetRepeat());
    list.add(present_repeat);
    if (present_repeat)
      list.add(repeat);

    boolean present_attendeeIdsByOccurence = true && (isSetAttendeeIdsByOccurence());
    list.add(present_attendeeIdsByOccurence);
    if (present_attendeeIdsByOccurence)
      list.add(attendeeIdsByOccurence);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepeatParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstStart()).compareTo(other.isSetFirstStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstStart, other.firstStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeat()).compareTo(other.isSetRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat, other.repeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttendeeIdsByOccurence()).compareTo(other.isSetAttendeeIdsByOccurence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttendeeIdsByOccurence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attendeeIdsByOccurence, other.attendeeIdsByOccurence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepeatParams(");
    boolean first = true;

    sb.append("firstStart:");
    sb.append(this.firstStart);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repeat:");
    if (this.repeat == null) {
      sb.append("null");
    } else {
      sb.append(this.repeat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attendeeIdsByOccurence:");
    if (this.attendeeIdsByOccurence == null) {
      sb.append("null");
    } else {
      sb.append(this.attendeeIdsByOccurence);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (repeat != null) {
      repeat.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepeatParamsStandardSchemeFactory implements SchemeFactory {
    public RepeatParamsStandardScheme getScheme() {
      return new RepeatParamsStandardScheme();
    }
  }

  private static class RepeatParamsStandardScheme extends StandardScheme<RepeatParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepeatParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstStart = iprot.readI64();
              struct.setFirstStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.repeat = new Repeat();
              struct.repeat.read(iprot);
              struct.setRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTENDEE_IDS_BY_OCCURENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.attendeeIdsByOccurence = new HashMap<Integer,List<String>>(2*_map8.size);
                int _key9;
                List<String> _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val10 = new ArrayList<String>(_list12.size);
                    String _elem13;
                    for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                    {
                      _elem13 = iprot.readString();
                      _val10.add(_elem13);
                    }
                    iprot.readListEnd();
                  }
                  struct.attendeeIdsByOccurence.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setAttendeeIdsByOccurenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepeatParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FIRST_START_FIELD_DESC);
      oprot.writeI64(struct.firstStart);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      if (struct.repeat != null) {
        oprot.writeFieldBegin(REPEAT_FIELD_DESC);
        struct.repeat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.attendeeIdsByOccurence != null) {
        oprot.writeFieldBegin(ATTENDEE_IDS_BY_OCCURENCE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.attendeeIdsByOccurence.size()));
          for (Map.Entry<Integer, List<String>> _iter15 : struct.attendeeIdsByOccurence.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter15.getValue().size()));
              for (String _iter16 : _iter15.getValue())
              {
                oprot.writeString(_iter16);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepeatParamsTupleSchemeFactory implements SchemeFactory {
    public RepeatParamsTupleScheme getScheme() {
      return new RepeatParamsTupleScheme();
    }
  }

  private static class RepeatParamsTupleScheme extends TupleScheme<RepeatParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepeatParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstStart()) {
        optionals.set(0);
      }
      if (struct.isSetDuration()) {
        optionals.set(1);
      }
      if (struct.isSetRepeat()) {
        optionals.set(2);
      }
      if (struct.isSetAttendeeIdsByOccurence()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFirstStart()) {
        oprot.writeI64(struct.firstStart);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetRepeat()) {
        struct.repeat.write(oprot);
      }
      if (struct.isSetAttendeeIdsByOccurence()) {
        {
          oprot.writeI32(struct.attendeeIdsByOccurence.size());
          for (Map.Entry<Integer, List<String>> _iter17 : struct.attendeeIdsByOccurence.entrySet())
          {
            oprot.writeI32(_iter17.getKey());
            {
              oprot.writeI32(_iter17.getValue().size());
              for (String _iter18 : _iter17.getValue())
              {
                oprot.writeString(_iter18);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepeatParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.firstStart = iprot.readI64();
        struct.setFirstStartIsSet(true);
      }
      if (incoming.get(1)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.repeat = new Repeat();
        struct.repeat.read(iprot);
        struct.setRepeatIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.attendeeIdsByOccurence = new HashMap<Integer,List<String>>(2*_map19.size);
          int _key20;
          List<String> _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val21 = new ArrayList<String>(_list23.size);
              String _elem24;
              for (int _i25 = 0; _i25 < _list23.size; ++_i25)
              {
                _elem24 = iprot.readString();
                _val21.add(_elem24);
              }
            }
            struct.attendeeIdsByOccurence.put(_key20, _val21);
          }
        }
        struct.setAttendeeIdsByOccurenceIsSet(true);
      }
    }
  }

}

