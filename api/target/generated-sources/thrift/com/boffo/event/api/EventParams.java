/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boffo.event.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class EventParams extends org.apache.thrift.TUnion<EventParams, EventParams._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventParams");
  private static final org.apache.thrift.protocol.TField REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ONE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("oneTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ONGOING_FIELD_DESC = new org.apache.thrift.protocol.TField("ongoing", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPEAT((short)1, "repeat"),
    ONE_TIME((short)2, "oneTime"),
    ONGOING((short)3, "ongoing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPEAT
          return REPEAT;
        case 2: // ONE_TIME
          return ONE_TIME;
        case 3: // ONGOING
          return ONGOING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPEAT, new org.apache.thrift.meta_data.FieldMetaData("repeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepeatParams.class)));
    tmpMap.put(_Fields.ONE_TIME, new org.apache.thrift.meta_data.FieldMetaData("oneTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OneTimeParams.class)));
    tmpMap.put(_Fields.ONGOING, new org.apache.thrift.meta_data.FieldMetaData("ongoing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OngoingParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventParams.class, metaDataMap);
  }

  public EventParams() {
    super();
  }

  public EventParams(_Fields setField, Object value) {
    super(setField, value);
  }

  public EventParams(EventParams other) {
    super(other);
  }
  public EventParams deepCopy() {
    return new EventParams(this);
  }

  public static EventParams repeat(RepeatParams value) {
    EventParams x = new EventParams();
    x.setRepeat(value);
    return x;
  }

  public static EventParams oneTime(OneTimeParams value) {
    EventParams x = new EventParams();
    x.setOneTime(value);
    return x;
  }

  public static EventParams ongoing(OngoingParams value) {
    EventParams x = new EventParams();
    x.setOngoing(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case REPEAT:
        if (value instanceof RepeatParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RepeatParams for field 'repeat', but got " + value.getClass().getSimpleName());
      case ONE_TIME:
        if (value instanceof OneTimeParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OneTimeParams for field 'oneTime', but got " + value.getClass().getSimpleName());
      case ONGOING:
        if (value instanceof OngoingParams) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OngoingParams for field 'ongoing', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case REPEAT:
          if (field.type == REPEAT_FIELD_DESC.type) {
            RepeatParams repeat;
            repeat = new RepeatParams();
            repeat.read(iprot);
            return repeat;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ONE_TIME:
          if (field.type == ONE_TIME_FIELD_DESC.type) {
            OneTimeParams oneTime;
            oneTime = new OneTimeParams();
            oneTime.read(iprot);
            return oneTime;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ONGOING:
          if (field.type == ONGOING_FIELD_DESC.type) {
            OngoingParams ongoing;
            ongoing = new OngoingParams();
            ongoing.read(iprot);
            return ongoing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case REPEAT:
        RepeatParams repeat = (RepeatParams)value_;
        repeat.write(oprot);
        return;
      case ONE_TIME:
        OneTimeParams oneTime = (OneTimeParams)value_;
        oneTime.write(oprot);
        return;
      case ONGOING:
        OngoingParams ongoing = (OngoingParams)value_;
        ongoing.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case REPEAT:
          RepeatParams repeat;
          repeat = new RepeatParams();
          repeat.read(iprot);
          return repeat;
        case ONE_TIME:
          OneTimeParams oneTime;
          oneTime = new OneTimeParams();
          oneTime.read(iprot);
          return oneTime;
        case ONGOING:
          OngoingParams ongoing;
          ongoing = new OngoingParams();
          ongoing.read(iprot);
          return ongoing;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case REPEAT:
        RepeatParams repeat = (RepeatParams)value_;
        repeat.write(oprot);
        return;
      case ONE_TIME:
        OneTimeParams oneTime = (OneTimeParams)value_;
        oneTime.write(oprot);
        return;
      case ONGOING:
        OngoingParams ongoing = (OngoingParams)value_;
        ongoing.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case REPEAT:
        return REPEAT_FIELD_DESC;
      case ONE_TIME:
        return ONE_TIME_FIELD_DESC;
      case ONGOING:
        return ONGOING_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public RepeatParams getRepeat() {
    if (getSetField() == _Fields.REPEAT) {
      return (RepeatParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'repeat' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRepeat(RepeatParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REPEAT;
    value_ = value;
  }

  public OneTimeParams getOneTime() {
    if (getSetField() == _Fields.ONE_TIME) {
      return (OneTimeParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'oneTime' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOneTime(OneTimeParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ONE_TIME;
    value_ = value;
  }

  public OngoingParams getOngoing() {
    if (getSetField() == _Fields.ONGOING) {
      return (OngoingParams)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ongoing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOngoing(OngoingParams value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ONGOING;
    value_ = value;
  }

  public boolean isSetRepeat() {
    return setField_ == _Fields.REPEAT;
  }


  public boolean isSetOneTime() {
    return setField_ == _Fields.ONE_TIME;
  }


  public boolean isSetOngoing() {
    return setField_ == _Fields.ONGOING;
  }


  public boolean equals(Object other) {
    if (other instanceof EventParams) {
      return equals((EventParams)other);
    } else {
      return false;
    }
  }

  public boolean equals(EventParams other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(EventParams other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
